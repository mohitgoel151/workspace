ACID (Atomicity, Consistency, Isolation, Durability)

In the context of databases, a single logical operation on the data is called a transaction. 
For example, a transfer of funds from one bank account to another, even involving multiple changes 
such as debiting one account and crediting another, is a single transaction.

Atomicity
Atomicity requires that each transaction be "all or nothing": if one part of the transaction fails, then the entire transaction fails.
In an atomic transaction, a series of database operations either all occur, or nothing occurs.  The series of operations cannot be divided 
apart and executed partially from each other

Consistency
Consistency property ensures that any transaction will bring the database from one valid state to another

Isolation
Isolation property ensures that the concurrent execution of transactions results in a system state that would be obtained 
if transactions were executed serially, i.e., one after the other. Providing isolation is the main goal of concurrency control. 
Depending on the concurrency control method, the effects of an incomplete transaction might not even be visible to another transaction.
Can be though similar to race condition where one system fails in between.

Durability
Durability property ensures that once a transaction has been committed, it will remain so, even in the event of power loss, crashes, or errors.
